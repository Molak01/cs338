Devin Lewis | CS 338


-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----



-----RSA PUBLIC KEY-----

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+JtOLq6I0ec9bxE8sY0J5GgaKZvJ2TuQwSbcoN/qRUt9ChJwvgdCCu/yHx1KDrVuz1m3rzjRvGYJDporOfwlgZT4L+5TL/KvH4fG5gEIHcuM6Es1DNcG2AhW+dylQylNIHJeAPVSRXoxAjrVdqvwEbuRTcdUgEcMFylvdMe2wqKjmqdRPXmH5dHiQhJ9rcwUM0+b/3o6ohDZDNYqmUv9IN8Nn4aZ4+MdlLva3DHlfOazaxZFCRYzqOCTOmfvyaZI+1k1b6J1m+2cfJVePVxL09zHUTZF+IB9naCEQf9fY25n0xtPahhlwjlfjOIx/FMWj1qy9lpoYfeUR9HQx+T+yC+GYHlgl9m+QP8qRtan96EelIGsCQoBVweHk0SKg0IH/xDLI5xG7BwDjRxJxG55ZQHIyCnK0yyXbDvJ9mFr0AJNNNac5INokrWtHw7lWW9N/D3rMfMmedxViKbYGsPSziq0JHRf1HHVZjTmuKDyJXLuocfTD8CfnViM0p5TYMgk= speedwarrior01@LAPTOP-OC9KCDE2
-----END RSA PUBLIC KEY-----







			*Private Key*

According to what I read in the appendix for this,
the items I expect to find are variables that each have a value related
to defining the key. For example:
- modulus = RSA % n
- exponent1 = d % (p-1)
- privateExponent = RSAprivate^d
- etc.

So I take my private key to the first linked decoder on the assignment page and translate it to hexadecimal. Then using that site I found the position of each integer as indicated by the highlighted numbers and got their approximate decimal values.

>The first integer I found was the modulus (n) according to RFC:
Value: 431525881....(Length of 389)
Location/Offset: 7
DER encoding: 02 82 01 81

>The second integer was the publicExponent (e):
Value: 65537
Location/Offset: 396
DER encoding: 02 03

>The third integer was privateExponent (d):
Value: 174238031.....(Length of 388)
Location/Offset: 401
DER encoding: 02 82 01 80

>The fourth integer is prime1 (p):
Value: 216475825.....(Length of 196)
Location/Offset: 789
DER encoding: 02 81 C1

>The fifth integer is prime2 (q):
Value: 199341372.....(Length of 196)
Location/Offset: 985
DER encoding: 02 81 C1

>The 6th is exponent1 (d mod (p-1)):
Value: 727806939.....(Length of 195)
Location/Offset: 1181
DER encoding: 02 81 C0

>The 7th is exponent1 (d mod (q-1)):
Value: 323845704.....(Length of 195)
Location/Offset: 1376
DER encoding: 02 81 C0

>Finally, the last integer is the coefficient ((inverse of q) mod p):
Value: 147258449.....(Length of 196)
Location/Offset: 1571
DER encoding: 02 81 C1


			*Public Key*


According to  the RFC, the only two integer values I should be on the lookout for are modulus and publicExponent. Which makes sense, since its the public key alot less would go into creating it since its not a major deal if its leaked.

Using the command I found on The Digital Cat blog, I was able to decode the public key and put it into hexadecimal.
I used this: cat id_rsa_homework.pub | cut -d " " -f2 | \
  base64 -d | hexdump -ve '/1 "%02x "' -e '2/8 "\n"'

This is the hex code:
00 00 00 07 73 73 68 2d 72 73 61 00 00 00 03 01
00 01 00 00 01 81 00 be 26 d3 8b ab a2 34 79 cf
5b c4 4f 2c 63 42 79 1a 06 8a 66 f2 76 4e e4 30
49 b7 28 37 fa 91 52 df 42 84 9c 2f 81 d0 82 bb
fc 87 c7 52 83 ad 5b b3 d6 6d eb ce 34 6f 19 82
43 a6 8a ce 7f 09 60 65 3e 0b fb 94 cb fc ab c7
e1 f1 b9 80 42 07 72 e3 3a 12 cd 43 35 c1 b6 02
15 be 77 29 50 ca 53 48 1c 97 80 3d 54 91 5e 8c
40 8e b5 5d aa fc 04 6e e4 53 71 d5 20 11 c3 05
ca 5b dd 31 ed b0 a8 a8 e6 a9 d4 4f 5e 61 f9 74
78 90 84 9f 6b 73 05 0c d3 e6 ff de 8e a8 84 36
43 35 8a a6 52 ff 48 37 c3 67 e1 a6 78 f8 c7 65
2e f6 b7 0c 79 5f 39 ac da c5 91 42 45 8c ea 38
24 ce 99 fb f2 69 92 3e d6 4d 5b e8 9d 66 fb 67
1f 25 57 8f 57 12 f4 f7 31 d4 4d 91 7e 20 1f 67
68 21 10 7f d7 d8 db 99 f4 c6 d3 da 86 19 70 8e
57 e3 38 8c 7f 14 c5 a3 d6 ac bd 96 9a 18 7d e5
11 f4 74 31 f9 3f b2 0b e1 98 1e 58 25 f6 6f 90
3f ca 91 b5 a9 fd e8 47 a5 20 6b 02 42 80 55 c1
e1 e4 d1 22 a0 d0 81 ff c4 32 c8 e7 11 bb 07 00
e3 47 12 71 1b 9e 59 40 72 32 0a 72 b4 cb 25 db
0e f2 7d 98 5a f4 00 93 4d 35 a7 39 20 da 24 ad
6b 47 c3 b9 56 5b d3 7f 0f 7a cc 7c c9 9e 77 15
62 29 b6 06 b0 f4 b3 8a ad 09 1d 17 f5 1c 75 59
8d 39 ae 28 3c 89 5c bb a8 71 f4 c3 f0 27 e7 56
23 34 a7 94 d8 32 09

>The first integer I found was the modulus (n) according to RFC:
Value: ???
Location/Offset: 22
DER encoding: 00 be 26 d3 8b ... 09

>Then the last integer was the publicExponent (e):
Value: 65537
Location/Offset: 15
DER Encoding: 01 00 01


			*Sanity Check*

e*d mod lambda(n) = 1?

I'm honestly not sure how I'd check this when my d and n are so large I can't even get the whole number.


















































